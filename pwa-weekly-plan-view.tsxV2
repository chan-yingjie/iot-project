"use client"

import { useEffect, useState } from "react"
import { db } from "../lib/firebase"
import {
  collection,
  getDocs,
  addDoc,
  deleteDoc,
  doc,
  updateDoc,
} from "firebase/firestore"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { CalendarIcon, PillIcon, ClockIcon, EditIcon, TrashIcon } from "lucide-react"
import { Label } from "@/components/ui/label"

interface Plan {
  id: string
  name: string
  date: string
  time: string
  dose: string
  status: string
}

export default function WeeklyPlanView() {
  const [plans, setPlans] = useState<Plan[]>([])
  const [newPlan, setNewPlan] = useState({
    name: "",
    date: "",
    time: "",
    dose: "",
  })
  const [editId, setEditId] = useState<string | null>(null)
  const [showPlans, setShowPlans] = useState(false)

  const fetchPlans = async () => {
    const snapshot = await getDocs(collection(db, "weeklyPlans"))
    const fetchedPlans = snapshot.docs.map((docSnap) => ({
      id: docSnap.id,
      ...docSnap.data(),
    })) as Plan[]
    setPlans(fetchedPlans)
  }

  const handleAddOrUpdatePlan = async () => {
    if (!newPlan.name || !newPlan.date || !newPlan.time || !newPlan.dose) return

    if (editId) {
      await updateDoc(doc(db, "weeklyPlans", editId), {
        name: newPlan.name,
        date: newPlan.date,
        time: newPlan.time,
        dose: newPlan.dose,
      })
      setEditId(null)
    } else {
      const planToAdd = {
        name: newPlan.name,
        date: newPlan.date,
        time: newPlan.time,
        dose: newPlan.dose,
        status: "Scheduled",
      }
      await addDoc(collection(db, "weeklyPlans"), planToAdd)
    }

    setNewPlan({ name: "", date: "", time: "", dose: "" })
    fetchPlans()
  }

  const handleEdit = (plan: Plan) => {
    setNewPlan({
      name: plan.name,
      date: plan.date,
      time: plan.time,
      dose: plan.dose,
    })
    setEditId(plan.id)
  }

  const handleDelete = async (id: string) => {
    await deleteDoc(doc(db, "weeklyPlans", id))
    fetchPlans()
  }

  useEffect(() => {
    fetchPlans()
  }, [])

  // Ê†ºÂºèÂåñÊó•Êúü‰∏∫Ëã±Êñá
  const formatDateInEnglish = (dateString: string) => {
    try {
      const date = new Date(dateString);
      return date.toLocaleDateString('en-US', {
        weekday: 'short',
        month: 'short',
        day: 'numeric',
        year: 'numeric'
      });
    } catch (e) {
      return dateString;
    }
  }

  return (
    <div className="max-w-5xl mx-auto px-4 py-8">
      <div className="text-center mb-10">
        <h1 className="text-3xl font-bold text-teal-600 mb-2">
          üóìÔ∏è Weekly Medication Schedule
        </h1>
        <p className="text-muted-foreground max-w-2xl mx-auto">
          Plan and manage your medication schedule for the week
        </p>
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
        {/* Left Side - Form */}
        <div className="md:col-span-1">
          <Card className="shadow-sm border">
            <CardHeader className="bg-slate-50 border-b py-4">
              <CardTitle className="text-lg font-medium text-slate-700">
                {editId ? "‚úèÔ∏è Edit Medication" : "‚ûï Add Medication"}
              </CardTitle>
            </CardHeader>
            <CardContent className="p-6 space-y-4">
              <div className="space-y-2">
                <Label htmlFor="med-name">Medication Name</Label>
                <div className="relative">
                  <PillIcon className="absolute top-2.5 left-2 h-4 w-4 text-muted-foreground" />
                  <Input
                    id="med-name"
                    className="pl-8"
                    placeholder="Enter medication name"
                    value={newPlan.name}
                    onChange={(e) => setNewPlan({ ...newPlan, name: e.target.value })}
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="med-date">Date</Label>
                <div className="relative">
                  <CalendarIcon className="absolute top-2.5 left-2 h-4 w-4 text-muted-foreground" />
                  <Input 
                    id="med-date"
                    className="pl-8"
                    type="date" 
                    value={newPlan.date} 
                    onChange={(e) => setNewPlan({ ...newPlan, date: e.target.value })} 
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="med-time">Time</Label>
                <div className="relative">
                  <ClockIcon className="absolute top-2.5 left-2 h-4 w-4 text-muted-foreground" />
                  <Input 
                    id="med-time"
                    className="pl-8"
                    type="time" 
                    value={newPlan.time} 
                    onChange={(e) => setNewPlan({ ...newPlan, time: e.target.value })} 
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="med-dose">Dose</Label>
                <Input
                  id="med-dose"
                  placeholder="e.g. 250mg or 1 tablet"
                  value={newPlan.dose}
                  onChange={(e) => setNewPlan({ ...newPlan, dose: e.target.value })}
                />
              </div>

              <Button 
                className="w-full" 
                onClick={handleAddOrUpdatePlan}
              >
                {editId ? "Update Medication" : "Add Medication"}
              </Button>

              {editId && (
                <Button 
                  variant="outline" 
                  className="w-full mt-2"
                  onClick={() => {
                    setEditId(null);
                    setNewPlan({ name: "", date: "", time: "", dose: "" });
                  }}
                >
                  Cancel Editing
                </Button>
              )}
            </CardContent>
          </Card>
        </div>

        {/* Right Side - Scheduled Plans */}
        <div className="md:col-span-2">
          <Card className="shadow-sm border">
            <CardHeader className="bg-slate-50 border-b py-4 flex flex-row justify-between items-center">
              <CardTitle className="text-lg font-medium text-slate-700">
                Scheduled Medications
              </CardTitle>
              <Button 
                variant="outline" 
                size="sm" 
                onClick={() => setShowPlans(!showPlans)}
              >
                {showPlans ? "Hide Schedule" : "Show Schedule"}
              </Button>
            </CardHeader>
            <CardContent className="p-0">
              {showPlans && (
                <div className="p-6">
                  {plans.length > 0 ? (
                    <div className="grid grid-cols-1 gap-4">
                      {plans.map((plan) => (
                        <Card key={plan.id} className="overflow-hidden border shadow-sm hover:shadow-md transition-shadow">
                          <CardContent className="p-0">
                            <div className="flex flex-col sm:flex-row">
                              <div className="bg-teal-50 p-4 sm:w-1/3 flex flex-col justify-center items-center text-center">
                                <CalendarIcon className="h-5 w-5 text-teal-600 mb-2" />
                                <div className="font-medium text-teal-700">
                                  {formatDateInEnglish(plan.date)}
                                </div>
                                <div className="text-sm text-teal-600">
                                  {plan.time}
                                </div>
                              </div>
                              
                              <div className="p-4 sm:w-2/3 flex flex-col justify-between">
                                <div>
                                  <h3 className="font-semibold text-lg mb-1">{plan.name}</h3>
                                  <div className="flex items-center mb-2">
                                    <div className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-teal-50 text-teal-700 mr-2">
                                      {plan.dose}
                                    </div>
                                    <div className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-50 text-blue-700">
                                      {plan.status}
                                    </div>
                                  </div>
                                </div>
                                
                                <div className="flex gap-2 mt-2">
                                  <Button 
                                    size="sm" 
                                    variant="outline"
                                    className="flex items-center"
                                    onClick={() => handleEdit(plan)}
                                  >
                                    <EditIcon className="h-3.5 w-3.5 mr-1" />
                                    Edit
                                  </Button>
                                  <Button 
                                    size="sm" 
                                    variant="destructive"
                                    className="flex items-center"
                                    onClick={() => handleDelete(plan.id)}
                                  >
                                    <TrashIcon className="h-3.5 w-3.5 mr-1" />
                                    Delete
                                  </Button>
                                </div>
                              </div>
                            </div>
                          </CardContent>
                        </Card>
                      ))}
                    </div>
                  ) : (
                    <div className="py-8 text-center">
                      <div className="inline-flex items-center justify-center w-12 h-12 rounded-full bg-slate-100 text-slate-500 mb-4">
                        <CalendarIcon className="h-6 w-6" />
                      </div>
                      <h3 className="text-lg font-medium">No medications scheduled</h3>
                      <p className="text-sm text-muted-foreground mt-1">
                        Add your first medication using the form.
                      </p>
                    </div>
                  )}
                </div>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  )
}
