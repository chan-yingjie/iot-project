#include <WiFi.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <Firebase_ESP_Client.h>
#include "addons/TokenHelper.h"
#include "addons/RTDBHelper.h"
#include "time.h"

/* ---------- Wi‑Fi ---------- */
#define WIFI_SSID     "chanchan"
#define WIFI_PASSWORD "00000000"

/* ---------- NTP服务器设置 ---------- */
#define NTP_SERVER1     "pool.ntp.org"
#define NTP_SERVER2     "time.nist.gov"
#define GMT_OFFSET_SEC  28800     // 东八区 (GMT+8) 偏移量，单位为秒 (8小时 * 60分钟 * 60秒)
#define DAYLIGHT_OFFSET_SEC 0     // 不使用夏令时

/* ---------- Firebase / Firestore ---------- */
#define API_KEY        "AIzaSyCIHkTK_SSNpPbjU3FLSGu8fDg7gR38q-s"
#define DATABASE_URL   "https://smart-medi-v0.firebaseio.com"
#define FIREBASE_PROJECT_ID "smart-medi-v0"
#define DATABASE_ID         "(default)"
#define USER_EMAIL    "esp32@smartpillbox.com"
#define USER_PASSWORD "12345678"

/* ---------- I/O ---------- */
#define LED_PIN     17
#define BUZZER_PIN  18
#define BUTTON_PIN  4
#define IR_SENSOR_PIN 36
#define IN1 2
#define IN2 13
#define IN3 25
#define IN4 26

/* ---------- OLED ---------- */
#define SCREEN_WIDTH  128
#define SCREEN_HEIGHT  64
#define OLED_RESET    -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

/* ---------- 步进电机序列 ---------- */
const int stepSequence[8][4] = {
  {1,0,0,0}, {1,1,0,0}, {0,1,0,0}, {0,1,1,0},
  {0,0,1,0}, {0,0,1,1}, {0,0,0,1}, {1,0,0,1}
};

/* ---------- Firebase 对象 ---------- */
FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

bool taskDone = false;
unsigned long dataMillis = 0;

/* ---------- 提醒状态控制 ---------- */
bool reminderStarted = false;
bool reminderAcknowledged = false;
unsigned long welcomeStartTime = 0;
bool takeMedsDisplayed = false;
bool buttonPressed = false;  // 新增：按钮按下状态

/* ---------- IR传感器和按钮的状态检测 ---------- */
unsigned long lastButtonCheckTime = 0;
const unsigned long buttonDebounceTime = 500; // 防抖动时间（毫秒）
unsigned long lastIRCheckTime = 0;
const unsigned long IRCheckInterval = 200; // IR检测间隔（毫秒）
int lastButtonState = HIGH;
int lastIRState = LOW;
int irThreshold = 1000; // IR传感器阈值

/* ---------- NTP 同步状态 ---------- */
bool ntpSynced = false;

/* ---------- 时间更新控制 ---------- */
unsigned long lastTimeUpdate = 0;
const unsigned long TIME_UPDATE_INTERVAL = 60000; // 60秒更新一次

/* ---------- 最近一次用药计划 ---------- */
String nextMedicationDate = "";
String nextMedicationTime = "";
bool hasNextMedication = false;

/* ---------- LED闪烁控制 ---------- */
bool ledBlinking = false;
unsigned long lastLedToggle = 0;
const unsigned long LED_BLINK_INTERVAL = 500; // LED闪烁间隔（毫秒）

// 函数原型声明
void showTakeMeds();
void activateReminder();
void deactivateReminder();
void rotateStepper60Degrees();
void handleMedicationTaken();
void handleButtonPress();  // 新增：处理按钮按下事件
void initFirebase();
void initNTP();
void checkWeeklyPlans();
void printJsonStructure(FirebaseJson &json, String path);
void logMedicationRecord(String date, String time, String status);
String getCurrentDate();
String getCurrentTime();
String getFullTime();
void displayCurrentTime();
void displayNextMedication();  // 新增：显示下一次用药计划
void fetchNextMedicationPlan(); // 新增：获取下一次用药计划

// 获取当前日期
String getCurrentDate() {
  Serial.println("[进度] 获取当前日期...");
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    Serial.println("[错误] 无法获取时间");
    return "Error";
  }
  
  char dateStr[11]; // YYYY-MM-DD + null terminator
  strftime(dateStr, sizeof(dateStr), "%Y-%m-%d", &timeinfo);
  Serial.println("[进度] 当前日期: " + String(dateStr));
  return String(dateStr);
}

// 获取当前时间（只返回HH:MM格式，与Firebase中的格式匹配）
String getCurrentTime() {
  Serial.println("[进度] 获取当前时间(HH:MM)...");
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    Serial.println("[错误] 无法获取时间");
    return "Error";
  }
  
  char timeStr[6]; // HH:MM + null terminator
  strftime(timeStr, sizeof(timeStr), "%H:%M", &timeinfo);
  Serial.println("[进度] 当前时间(HH:MM): " + String(timeStr));
  return String(timeStr);
}

// 获取完整时间（包含秒，用于显示）
String getFullTime() {
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) {
    Serial.println("[错误] 无法获取完整时间");
    return "Error";
  }
  
  char timeStr[9]; // HH:MM:SS + null terminator
  strftime(timeStr, sizeof(timeStr), "%H:%M:%S", &timeinfo);
  return String(timeStr);
}

// 初始化NTP服务
void initNTP() {
  Serial.println("\n[进度] 正在配置NTP...");
  
  // 配置NTP服务器并同步时间
  configTime(GMT_OFFSET_SEC, DAYLIGHT_OFFSET_SEC, NTP_SERVER1, NTP_SERVER2);
  
  // 等待获取时间
  Serial.println("[进度] 正在等待NTP时间同步");
  time_t now = time(nullptr);
  int attempts = 0;
  const int MAX_ATTEMPTS = 10;
  
  while (now < 24 * 3600 && attempts < MAX_ATTEMPTS) {
    Serial.print(".");
    delay(1000);
    now = time(nullptr);
    attempts++;
  }
  
  if (attempts >= MAX_ATTEMPTS) {
    Serial.println("\n[错误] 多次尝试后仍无法同步NTP时间!");
    ntpSynced = false;
  } else {
    Serial.println("\n[进度] NTP时间同步成功!");
    ntpSynced = true;
    
    // 显示当前时间作为测试
    struct tm timeinfo;
    getLocalTime(&timeinfo);
    
    char timeStr[50];
    strftime(timeStr, sizeof(timeStr), "%Y-%m-%d %H:%M:%S", &timeinfo);
    Serial.println("[进度] 当前时间: " + String(timeStr));
    
    // 显示在OLED上
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(5, 10);
    display.println("NTP Synced:");
    display.setCursor(5, 30);
    display.println(timeStr);
    display.display();
    delay(2000); // 显示2秒
  }
}

// 显示当前时间在OLED上
void displayCurrentTime() {
  if (!ntpSynced) {
    Serial.println("[警告] NTP未同步，无法显示时间");
    return;
  }
  
  struct tm timeinfo;
  if (getLocalTime(&timeinfo)) {
    String fullTime = getFullTime();
    
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(40, 0);
    display.println(fullTime);
    
    // 显示当前日期
    char dateStr[11];
    strftime(dateStr, sizeof(dateStr), "%Y-%m-%d", &timeinfo);
    display.setCursor(30, 55);
    display.println(dateStr);
    
    if (hasNextMedication) {
      // 显示下一次用药计划
      display.setTextSize(1);
      display.setCursor(5, 20);
      display.println("Next medication:");
      display.setCursor(5, 35);
      display.println(nextMedicationDate + " " + nextMedicationTime);
    } else {
      // 如果没有计划，显示"READY"
      display.setTextSize(2);
      display.setCursor(30, 25);
      display.println("READY");
    }
    
    display.display();
  }
}

// 显示下一次用药计划
void displayNextMedication() {
  Serial.println("[进度] 显示下一次用药计划");
  if (!hasNextMedication) {
    Serial.println("[进度] 没有找到下一次用药计划");
    return;
  }
  
  display.clearDisplay();
  
  // 显示当前时间和日期
  if (ntpSynced) {
    String fullTime = getFullTime();
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(40, 0);
    display.println(fullTime);
    
    String currentDate = getCurrentDate();
    display.setCursor(30, 55);
    display.println(currentDate);
  }
  
  // 显示下一次用药计划
  display.setTextSize(1);
  display.setCursor(5, 20);
  display.println("Next medication:");
  display.setCursor(5, 35);
  display.println(nextMedicationDate + " " + nextMedicationTime);
  display.display();
  
  Serial.println("[进度] 下一次用药计划已显示: " + nextMedicationDate + " " + nextMedicationTime);
}

// 步进电机旋转60度
void rotateStepper60Degrees() {
  Serial.println("[进度] 步进电机开始旋转60度...");
  int steps = 682; // 60 度 ≈ 682 步
  for (int i = 0; i < steps; i++) {
    int seq = i % 8;
    digitalWrite(IN1, stepSequence[seq][0]);
    digitalWrite(IN2, stepSequence[seq][1]);
    digitalWrite(IN3, stepSequence[seq][2]);
    digitalWrite(IN4, stepSequence[seq][3]);
    delay(2);
  }
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, LOW);
  Serial.println("[进度] 步进电机旋转完成");
}

// 显示"用药时间到"提示
void showTakeMeds() {
  Serial.println("[进度] 显示'用药时间到'提示");
  display.clearDisplay();
  
  // 如果NTP已同步，在顶部显示当前时间
  if (ntpSynced) {
    String fullTime = getFullTime();
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(40, 0);
    display.println(fullTime);
    
    // 显示当前日期
    String currentDate = getCurrentDate();
    display.setCursor(30, 55);
    display.println(currentDate);
  }
  
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(10, 20);
  display.println("Take Medi");
  display.display();
  takeMedsDisplayed = true;
  Serial.println("[进度] '用药时间到'提示已显示");
}

// 激活提醒
void activateReminder() {
  Serial.println("[进度] 激活提醒...");
  digitalWrite(LED_PIN, HIGH);
  tone(BUZZER_PIN, 1000);
  
  Serial.println("[进度] 提醒激活成功!");
  Serial.println("[进度] 等待用户取药...");
  Serial.println("[提示] - 按下按钮或取出药物以确认");
}

// 处理按钮按下事件
void handleButtonPress() {
  Serial.println("[进度] 按钮已按下，停止蜂鸣器，LED开始闪烁");
  
  // 停止蜂鸣器
  noTone(BUZZER_PIN);
  
  // 设置LED闪烁状态
  ledBlinking = true;
  
  // 步进电机旋转60度
  rotateStepper60Degrees();
  
  // 标记按钮已按下
  buttonPressed = true;
  
  Serial.println("[进度] 等待药物被取出...");
}

// 处理药物已取出事件
void handleMedicationTaken() {
  Serial.println("[进度] 确认药物已取出!");
  reminderAcknowledged = true;
  
  // 停止LED和蜂鸣器
  digitalWrite(LED_PIN, LOW);
  noTone(BUZZER_PIN);
  ledBlinking = false;
  
  // 更新显示
  display.clearDisplay();
  
  // 如果NTP已同步，显示时间
  if (ntpSynced) {
    String fullTime = getFullTime();
    String currentDate = getCurrentDate();
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(40, 0);
    display.println(fullTime);
    
    // 显示当前日期
    display.setCursor(30, 55);
    display.println(currentDate);
  }
  
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(30, 20);
  display.println("Thank You");
  display.display();
  
  Serial.println("[进度] 显示'谢谢'");
  
  // 记录用药记录到Firebase
  const String today = getCurrentDate(); 
  const String now = getCurrentTime();  
  logMedicationRecord(today, now, "taken");
  
  // 5秒后恢复显示下一次用药计划
  delay(5000);
  
  // 获取最近的用药计划并显示
  fetchNextMedicationPlan();
  
  // 重置状态准备下一次提醒
  reminderStarted = false;
  reminderAcknowledged = false;
  takeMedsDisplayed = false;
  buttonPressed = false;
}

// 初始化Firebase
void initFirebase() {
  Serial.println("\n[进度] 正在初始化Firebase...");
  
  config.api_key = API_KEY;
  config.database_url = DATABASE_URL;
  
  // 设置登录凭据
  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;
  
  // 添加回调函数
  config.token_status_callback = tokenStatusCallback;
  
  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);
  
  Serial.println("[进度] Firebase初始化完成.");
  
  // 等待认证完成
  Serial.println("[进度] 等待Firebase认证...");
  int authAttempts = 0;
  while (Firebase.isTokenExpired() && authAttempts < 30) {
    Serial.print(".");
    delay(1000);
    authAttempts++;
  }
  
  if (Firebase.isTokenExpired()) {
    Serial.println("\n[错误] 30秒后认证失败!");
  } else {
    Serial.println("\n[进度] Firebase认证成功!");
  }
}

// 获取下一次用药计划
void fetchNextMedicationPlan() {
  Serial.println("[进度] 获取下一次用药计划...");
  
  if (!ntpSynced) {
    Serial.println("[警告] NTP未同步，尝试重新同步...");
    initNTP();
    if (!ntpSynced) {
      Serial.println("[错误] NTP同步失败，无法获取用药计划");
      return;
    }
  }
  
  // 获取当前日期和时间
  const String today = getCurrentDate();
  const String now = getCurrentTime();
  
  // 使用正确的集合路径格式
  String collectionPath = "weeklyPlans";
  
  Serial.println("[进度] 尝试获取集合中的文档: " + collectionPath);
  
  if (Firebase.Firestore.listDocuments(&fbdo, FIREBASE_PROJECT_ID, "", 
                                       collectionPath.c_str(), 10, 
                                       "", "", "", false)) {
    
    Serial.println("[进度] 成功获取文档列表");
    
    // 将响应数据解析为JSON
    FirebaseJson payload;
    payload.setJsonData(fbdo.payload());
    
    // 获取文档数量
    FirebaseJsonData documentsArray;
    payload.get(documentsArray, "documents");
    
    if (documentsArray.success && documentsArray.type == "array") {
      FirebaseJsonArray docArray;
      docArray.setJsonArrayData(documentsArray.stringValue);
      
      Serial.print("[进度] 找到 ");
      Serial.print(docArray.size());
      Serial.println(" 个文档");
      
      String nextDate = "";
      String nextTime = "";
      bool foundNext = false;
      
      // 遍历每个文档
      for (size_t i = 0; i < docArray.size(); i++) {
        FirebaseJsonData docItem;
        docArray.get(docItem, i);
        
        if (docItem.success) {
          FirebaseJson docJson;
          docJson.setJsonData(docItem.stringValue);
          
          // 获取文档名称/路径
          FirebaseJsonData nameData;
          docJson.get(nameData, "name");
          
          if (nameData.success) {
            String docPath = nameData.stringValue;
            
            // 从路径中提取文档ID
            int lastSlash = docPath.lastIndexOf('/');
            String docId = (lastSlash != -1) ? docPath.substring(lastSlash + 1) : docPath;
            
            // 获取单个文档详情
            if (Firebase.Firestore.getDocument(&fbdo, FIREBASE_PROJECT_ID, "", 
                                              (collectionPath + "/" + docId).c_str(), "")) {
              
              FirebaseJson contentJson;
              contentJson.setJsonData(fbdo.payload());
              
              // 直接提取字段值
              FirebaseJsonData dateField, timeField;
              contentJson.get(dateField, "fields/date/stringValue");
              contentJson.get(timeField, "fields/time/stringValue");
              
              String date = dateField.success ? dateField.stringValue : "Unknown date";
              String time = timeField.success ? timeField.stringValue : "Unknown time";
              
              // 检查是否是未来的计划
              if ((date > today) || (date == today && time > now)) {
                // 找到最近的一次未来计划
                if (!foundNext || date < nextDate || (date == nextDate && time < nextTime)) {
                  nextDate = date;
                  nextTime = time;
                  foundNext = true;
                }
              }
            }
          }
        }
      }
      
      if (foundNext) {
        Serial.println("[进度] 找到下一次用药计划: " + nextDate + " " + nextTime);
        nextMedicationDate = nextDate;
        nextMedicationTime = nextTime;
        hasNextMedication = true;
        displayNextMedication();
      } else {
        Serial.println("[进度] 没有找到未来的用药计划");
        hasNextMedication = false;
        displayCurrentTime();
      }
    } else {
      Serial.println("[警告] 未找到文档或数组解析错误");
    }
  } else {
    Serial.println("[错误] listDocuments错误: " + fbdo.errorReason());
  }
}

// 记录用药记录到Firebase
void logMedicationRecord(String date, String time, String status) {
  Serial.println("[进度] 记录用药记录到Firebase...");
  FirebaseJson content;
  content.set("fields/date/stringValue", date);
  content.set("fields/time/stringValue", time);
  content.set("fields/status/stringValue", status);

  String jsonString;
  content.toString(jsonString);

  const char *collectionId = "medicationRecords";
  String docId = "record_" + String(millis());

  if (!Firebase.Firestore.createDocument(
        &fbdo,
        FIREBASE_PROJECT_ID,
        "",  
        collectionId,
        docId.c_str(),
        jsonString.c_str(),
        "")) {
    Serial.println("[错误] 记录用药记录失败: " + fbdo.errorReason());
  } else {
    Serial.println("[进度] 用药记录已成功保存");
  }
}

// 调试助手：打印JSON结构
void printJsonStructure(FirebaseJson &json, String path) {
  Serial.println("[进度] 检查JSON结构，路径: " + path);
  
  FirebaseJsonData result;
  size_t len = json.iteratorBegin();
  String key, value;
  int type = 0;
  
  for (size_t i = 0; i < len; i++) {
    json.iteratorGet(i, type, key, value);
    Serial.print(i);
    Serial.print(": ");
    Serial.print("Type: ");
    Serial.print(type == FirebaseJson::JSON_OBJECT ? "object" : 
                type == FirebaseJson::JSON_ARRAY ? "array" : 
                type == FirebaseJson::JSON_STRING ? "string" : 
                type == FirebaseJson::JSON_INT ? "int" : 
                type == FirebaseJson::JSON_FLOAT ? "float" : 
                type == FirebaseJson::JSON_DOUBLE ? "double" : 
                type == FirebaseJson::JSON_BOOL ? "boolean" : 
                type == FirebaseJson::JSON_NULL ? "null" : "unknown");
    Serial.print(", Key: ");
    Serial.print(key);
    Serial.print(", Value: ");
    Serial.println(value.length() > 30 ? value.substring(0, 30) + "..." : value);
  }
  
  json.iteratorEnd();
}

// 检查每周计划
void checkWeeklyPlans() {
  Serial.println("[进度] 检查每周用药计划...");
  
  // 如果NTP未同步，尝试再次同步
  if (!ntpSynced) {
    Serial.println("[警告] NTP未同步，尝试重新同步...");
    initNTP();
    if (!ntpSynced) {
      Serial.println("[错误] NTP同步再次失败，使用默认时间");
      return; // 如果NTP同步失败，直接返回，不进行药物提醒检查
    }
  }
  
  // 获取当前日期和时间
  const String today = getCurrentDate();
  const String now = getCurrentTime();
  
  Serial.println("[进度] 检查 " + today + " " + now + " 的用药计划");

  // 使用正确的集合路径格式
  String collectionPath = "weeklyPlans";
  
  Serial.println("[进度] 尝试获取集合中的文档: " + collectionPath);
  
  if (Firebase.Firestore.listDocuments(&fbdo, FIREBASE_PROJECT_ID, "", 
                                       collectionPath.c_str(), 10, 
                                       "", "", "", false)) {
    
    Serial.println("[进度] 成功获取文档列表");
    
    // 将响应数据解析为JSON
    FirebaseJson payload;
    payload.setJsonData(fbdo.payload());
    
    // 获取文档数量
    FirebaseJsonData documentsArray;
    payload.get(documentsArray, "documents");
    
    if (documentsArray.success && documentsArray.type == "array") {
      FirebaseJsonArray docArray;
      docArray.setJsonArrayData(documentsArray.stringValue);
      
      Serial.print("[进度] 找到 ");
      Serial.print(docArray.size());
      Serial.println(" 个文档");
      
      // 遍历每个文档
      for (size_t i = 0; i < docArray.size(); i++) {
        FirebaseJsonData docItem;
        docArray.get(docItem, i);
        
        if (docItem.success) {
          FirebaseJson docJson;
          docJson.setJsonData(docItem.stringValue);
          
          // 获取文档名称/路径
          FirebaseJsonData nameData;
          docJson.get(nameData, "name");
          
          if (nameData.success) {
            String docPath = nameData.stringValue;
            Serial.println("[进度] 文档路径: " + docPath);
            
            // 从路径中提取文档ID
            int lastSlash = docPath.lastIndexOf('/');
            String docId = (lastSlash != -1) ? docPath.substring(lastSlash + 1) : docPath;
            
            // 获取单个文档详情
            Serial.println("[进度] 尝试获取文档: " + docId);
            
            // 使用正确的文档路径格式
            if (Firebase.Firestore.getDocument(&fbdo, FIREBASE_PROJECT_ID, "", 
                                              (collectionPath + "/" + docId).c_str(), "")) {
              
              Serial.println("[进度] 成功获取文档详情");
              
              FirebaseJson contentJson;
              contentJson.setJsonData(fbdo.payload());
              
              // 直接提取字段值
              FirebaseJsonData dateField, timeField;
              contentJson.get(dateField, "fields/date/stringValue");
              contentJson.get(timeField, "fields/time/stringValue");
              
              String date = dateField.success ? dateField.stringValue : "Unknown date";
              String time = timeField.success ? timeField.stringValue : "Unknown time";
              
              Serial.print("[进度] 日期 = "); 
              Serial.print(date);
              Serial.print(" | 时间 = "); 
              Serial.println(time);
              
              // 对比Firestore中的时间和当前实际时间
              Serial.print("[进度] NTP当前时间: ");
              Serial.print(today);
              Serial.print(" ");
              Serial.println(now);
              
              // 精确匹配日期和时间
              if (date == today && time == now) {
                Serial.println("[进度] *** 匹配成功! 日期和时间完全匹配，触发提醒 ***");
                
                // 重置提醒状态，确保按钮或IR传感器确认逻辑生效
                reminderStarted = true;
                reminderAcknowledged = false; // 明确设置为未确认，等待用户操作
                buttonPressed = false;        // 重置按钮状态
                takeMedsDisplayed = false;
                ledBlinking = false;
                activateReminder();
                showTakeMeds();
              } else {
                // 如果是第一次检查，记录最近的用药计划
                if (!hasNextMedication && ((date > today) || (date == today && time > now))) {
                  nextMedicationDate = date;
                  nextMedicationTime = time;
                  hasNextMedication = true;
                }
              }
            } else {
              Serial.println("[错误] getDocument错误: " + fbdo.errorReason());
            }
          } else {
            Serial.println("[警告] 无法提取文档名称");
          }
        } else {
          Serial.println("[警告] 无法提取索引 " + String(i) + " 的文档");
        }
      }
    } else {
      Serial.println("[警告] 未找到文档或数组解析错误");
    }
  } else {
    Serial.println("[错误] listDocuments错误: " + fbdo.errorReason());
  }
}

void setup() {
  Serial.begin(115200);
  Serial.println("\n[进度] 系统启动中...");
  
  Wire.begin(21, 22); // OLED SDA/SCL 引脚
  Serial.println("[进度] I2C初始化完成");

  pinMode(LED_PIN, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);
  pinMode(BUTTON_PIN, INPUT_PULLUP);
  pinMode(IR_SENSOR_PIN, INPUT);
  pinMode(IN1, OUTPUT); pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT); pinMode(IN4, OUTPUT);
  Serial.println("[进度] I/O引脚初始化完成");

  Serial.println("[进度] 正在连接WiFi...");
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("[进度] 连接到WiFi");
  
  // 初始化OLED
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println("[错误] SSD1306分配失败");
  } else {
    Serial.println("[进度] OLED初始化成功");
    
    // 显示正在连接WiFi
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(10, 10);
    display.println("Connecting to");
    display.setCursor(10, 25);
    display.println(WIFI_SSID);
    display.display();
  }
  
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\n[进度] WiFi连接成功");
  Serial.print("[进度] IP地址: ");
  Serial.println(WiFi.localIP());
  
  // 在OLED上显示WiFi已连接
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(10, 10);
  display.println("WiFi connected");
  display.setCursor(10, 30);
  display.println(WiFi.localIP().toString());
  display.display();
  delay(2000);
  
  // 切换到欢迎界面
  display.clearDisplay();
  display.setTextSize(2);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(10, 20);
  display.println("WELCOME");
  display.display();
  welcomeStartTime = millis();

  // 初始化NTP
  initNTP();
  
  // 初始化Firebase
  initFirebase();
  
  // 记录时间更新的起始时间
  lastTimeUpdate = millis();
  
  Serial.println("[进度] 设置完成，开始主循环");
}

void loop() {
  // 获取当前时间
  unsigned long currentMillis = millis();
  
  // 如果LED处于闪烁状态，执行闪烁
  if (ledBlinking && (currentMillis - lastLedToggle >= LED_BLINK_INTERVAL)) {
    lastLedToggle = currentMillis;
    digitalWrite(LED_PIN, !digitalRead(LED_PIN)); // 切换LED状态
  }
  
  // 如果NTP已同步，定期更新时间显示（除非正在显示提醒）
  if (ntpSynced && !reminderStarted && currentMillis - lastTimeUpdate >= TIME_UPDATE_INTERVAL) {
    lastTimeUpdate = currentMillis;
    Serial.println("[进度] 更新时间显示");
    
    if (hasNextMedication) {
      displayNextMedication();
    } else {
      displayCurrentTime();
    }
  }
  
  // 检查WiFi和Firebase连接状态
  if (Firebase.ready() && !taskDone) {
    Serial.println("[进度] Firebase准备就绪，检查每周计划...");
    checkWeeklyPlans();
    fetchNextMedicationPlan(); // 获取最近的用药计划
    taskDone = true;
  }
  
  // 每分钟检查一次Firebase数据（使用60秒作为间隔确保不会错过任何计划）
  if (currentMillis - dataMillis > 60000 && Firebase.ready()) {
    dataMillis = currentMillis;
    
    // 获取并显示当前时间
    String currentDate = getCurrentDate();
    String currentTime = getCurrentTime();
    String fullTime = getFullTime();
    Serial.print("[进度] 当前日期和时间: ");
    Serial.print(currentDate);
    Serial.print(" ");
    Serial.println(fullTime);
    
    Serial.println("[进度] 定期检查每周计划...");
    checkWeeklyPlans();
  }
  
  // 欢迎显示5秒后，如果有提醒需要触发
  if (!reminderStarted && currentMillis - welcomeStartTime >= 5000 && taskDone) {
    // 如果是第一次启动，先检查当前时间是否有需要提醒的事项
    if (currentMillis - welcomeStartTime < 6000) {
      Serial.println("[进度] 启动时检查每周计划...");
      checkWeeklyPlans();
      
      // 获取最近的用药计划
      fetchNextMedicationPlan();
    }
    
    // 如果没有找到匹配时间，显示当前时间或最近的用药计划
    if (!reminderStarted) {
      if (hasNextMedication) {
        displayNextMedication();
      } else {
        displayCurrentTime();
      }
    }
  }
  
  // 提醒状态处理
  if (reminderStarted) {
    // 检查按钮状态（带防抖动）
    int buttonState = digitalRead(BUTTON_PIN);
    if (buttonState == LOW && lastButtonState == HIGH && 
        (currentMillis - lastButtonCheckTime > buttonDebounceTime)) {
      lastButtonCheckTime = currentMillis;
      Serial.println("[进度] 按钮被按下");
      
      if (!buttonPressed) {
        // 第一次按下按钮，停止蜂鸣器，LED开始闪烁，转动步进电机
        handleButtonPress();
      }
    }
    lastButtonState = buttonState;
    
    // 检查IR传感器状态（每200ms检查一次以减少噪声）
    if (currentMillis - lastIRCheckTime >= IRCheckInterval) {
      lastIRCheckTime = currentMillis;
      int irValue = analogRead(IR_SENSOR_PIN);
      Serial.print("[进度] IR传感器值: ");
      Serial.println(irValue);
      
      // 检测是否有物体移动（当IR值超过阈值）
      if (irValue > irThreshold && !reminderAcknowledged) {
        Serial.println("[进度] 检测到药物被取出");
        handleMedicationTaken();
      }
    }
    
    // 未确认状态下的提醒行为
    if (!reminderAcknowledged) {
      if (!buttonPressed) {
        // 如果按钮未按下，LED常亮，蜂鸣器持续响
        digitalWrite(LED_PIN, HIGH);
        tone(BUZZER_PIN, 1000);
      }
      
      // 确保"用药时间到"显示
      if (!takeMedsDisplayed) {
        showTakeMeds();
      }
    }
  }
}
